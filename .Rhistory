library(devtools)
decument()
document()
document()
document()
document()
BioCG_1_cat
BioCG_1_cat(c("a","c","a","name")
)
BioCG_1_cat(c("a","c","a","name")
)
document()
BioCG_1_cat(1:3)
BioCG_1_cat <- function(x,the_var="variable"){
the_result_1 <- janitor::tabyl(x) %>%
dplyr::mutate(percent = paste0(round(percent*100,3),"%"),
!!the_var := paste0(n,paste0("(",percent,")")))
the_result_2 <- setNames(data.frame(t(the_result_1[,-1])),the_result_1[,1])
the_result_3 <- the_result_2[the_var,]
return(the_result_3)
}
BioCG_1_cat(c("1","2"))
library(devtools)
document()
library(devtools)
document()
document()
document()
devtools::uses_testthat("BioCG_catcontvarsum")
library(BioCG)
??BioCG
library(devtools)
document()
document()
the_data <- data.frame(a=c(1,2,3,4,5))
the_data
BioCG_catcontvarsum
BioCG_catcontvarsum(the_data,"a",FALSE)
data_mat <- data.frame(the_data)
data_mat
the_var_index <- getcol(data_mat,"a")
the_var_index
contvarsum(data_mat,the_var_index,the_var_index)
data_mat
the_var_index
the_var_index
contvarsum(data_mat,the_var_index,the_var_index)
contvarsum
mat <- the_data
mat <- the_data
idcol <- 1
varcol <- 1
doplot=T
myuni=T
check5=F
print5=T
if(myuni==T){
cat("Number of subjects for non-missing:",
length(unique(mat[is.na(mat[, varcol]) == F & mat[, varcol] != "NA", idcol])), "\n")}
nomistable=table(mat[, varcol])
less5=0
if(check5==T){
if(nrow(mat)<BCthresh) {
less5=1   #flag that there is a small number in the data or no variability indicating small sample
cat("\n\n********* WARNING: A count is less than",BCthresh,"and summary not provided.\n\n")
}
}
if(less5==0 || print5==T){
cat("Summary:\n")
print(summary(mat[, varcol]))
cat("SD:",sd(mat[,varcol],na.rm=T),"\n\n")
if(doplot==T){
boxplot(mat[,varcol],ylab=dimnames(mat)[[2]][varcol],main="")
#have to check if there would be counts that are less than the threshold, not sure if CaraSpace requires these counts to be suppressed too
tthist=hist(mat[,varcol],main=paste(dimnames(mat)[[2]][varcol],"",sep=""),xlab=dimnames(mat)[[2]][varcol],plot=F)
binmin=tthist$counts
binmin=binmin[binmin>0]  #remove all the 0s
if(print5==T || (min(binmin)>=BCthresh)){
print(tthist)
}
else{
cat("\nNOTE: Histogram not printing because cell size smaller than",BCthresh,". Can see by forcing print5=T.")
}
}
}
less5
print5
cat("Summary:\n")
print(summary(mat[, varcol]))
cat("SD:",sd(mat[,varcol],na.rm=T),"\n\n")
boxplot(mat[,varcol],ylab=dimnames(mat)[[2]][varcol],main="")
tthist=hist(mat[,varcol],main=paste(dimnames(mat)[[2]][varcol],"",sep=""),xlab=dimnames(mat)[[2]][varcol],plot=F)
dimnames(mat)
paste(dimnames(mat)[[2]][varcol]
paste(dimnames(mat)[[2]][varcol],"",sep="")
paste(dimnames(mat)[[2]][varcol],"",sep="")
dimnames(mat)[[2]][varcol],plot=F)
dimnames(mat)[[2]][varcol]
plot=F
hist(mat[,varcol],main=paste(dimnames(mat)[[2]][varcol],"",sep=""),xlab=dimnames(mat)[[2]][varcol],plot=F)
hist(mat[,varcol])
hist(mat[,varcol],main=paste(dimnames(mat)[[2]][varcol],"",sep=""),xlab=dimnames(mat)[[2]][varcol],plot=F)
hist(mat[,varcol],
main=paste(dimnames(mat)[[2]][varcol],"",sep=""),
xlab=dimnames(mat)[[2]][varcol],
plot=F)
hist(mat[,varcol],
main=paste(dimnames(mat)[[2]][varcol],"",sep=""),
#xlab=dimnames(mat)[[2]][varcol],
plot=F)
hist(mat[,varcol],
#main=paste(dimnames(mat)[[2]][varcol],"",sep=""),
#xlab=dimnames(mat)[[2]][varcol],
plot=F)
?hist
paste(dimnames(mat)[[2]][varcol],"",sep="")
hist(mat[,varcol],
main=paste(dimnames(mat)[[2]][varcol],"",sep=""),
#xlab=dimnames(mat)[[2]][varcol],
plot=F)
hist(mat[,varcol],
main=paste(dimnames(mat)[[2]][varcol],"",sep=""),
#xlab=dimnames(mat)[[2]][varcol],
#plot=F
)
hist(mat[,varcol],
main=paste(dimnames(mat)[[2]][varcol],"",sep=""),
xlab=dimnames(mat)[[2]][varcol],
#plot=F
)
document()
document()
document()
mat <- the_data
idcol <- 1
varcol <- 1
mat
BioCG_catcontvarsum(the_data,"a",TRUE)
idcol
BCthresh=5 #threshold for checking what is too small to leave CaraSpace
check5=F
print5=T
#A little header and some basic info about data
cat("\n---------------Variable name: ", dimnames(mat)[[2]][varcol], " column=", varcol, "\n")
cat("Number of non-missing data points: ",
length(mat[is.na(mat[, varcol]) == FALSE & mat[, varcol] != "NA", varcol]), "\n")
if(myuni==T){
cat("Number of subjects for non-missing:",
length(unique(mat[is.na(mat[, varcol]) == F & mat[, varcol] != "NA", idcol])), "\n")}
check if there is a small number in a count that we need to worry about having it leave CaraSpace
nomistable=table(mat[, varcol])
#print(nomistable)
#print(min(nomistable))
less5=0
if(check5==T){
if(min(nomistable)<BCthresh) {
less5=1   #flag that there is a small number
cat("\n\n********* WARNING: A count is less than",BCthresh,"and needs not to leave CaraSpace.\n\n")
}
}
cat("Raw counts:\n") # print out the frequency table and some percents
print(table(mat[, varcol],useNA = "ifany"))
cat("As a percentage of non-missing:\n")
print(100 * round(table(mat[, varcol])/(sum(table(mat[, varcol]))),digits=3))
cat("\n")
nlev=length(unique(mat[, varcol]))
mylas=1;myfactor=1;maxy=1.1*nrow(mat); if (nlev>5) {mylas=2;myfactor=0.75;}
if(doplot==T){ # If there is a plot to be done
colors <- rainbow(length(unique(mat[,varcol])))
if(is.null(usecolours)==F){
if(length(colours)==length(unique(mat[,varcol]))){
colors=usecolours
}else{
cat("\n\nNOTE: usecolours supplied had length",length(usecolours),"but the number needed is",length(unique(mat[,varcol])),
"so rainbow colours used instead.")
}  }
oldpar=par()$mai
myfreq=table(mat[,varcol])
t1=max(myfreq)/maxy
myi=.05*maxy
if (max(myfreq)<.5*maxy) {maxy=1.1*t1*maxy;myi=.25*myi}
labs <- names(table(mat[,varcol]))
if(myrot==T){
linch <-  max(strwidth(labs, "inch")+0.4, na.rm = TRUE)
par(mai=c(.5*linch,.82,0.82,0.42))
}
bp=barplot(myfreq,ylab="Frequency",xlab="",main="",ylim=c(0,maxy),
col=colors,axes=F,xaxt="n")
axis(1,at=bp,labels=F)
axis(2)
text(bp, myfreq+myi,myfreq,xpd=NA)
if(myrot==T){ #to allow for rotated tick labels to make things fit
text(cex=myfactor, x=bp+bp[1], y=-.04*maxy, labs, xpd=TRUE, srt=45,pos=2)
#print(bp)
par(mai=oldpar)
}
else{axis(1,bp,labs,cex=myfactor);
mtext(dimnames(mat)[[2]][varcol],side=1,line=2)
}
}
oldpar
bp
if(less5==0 || print5==T){
cat("Raw counts:\n") # print out the frequency table and some percents
print(table(mat[, varcol],useNA = "ifany"))
cat("As a percentage of non-missing:\n")
print(100 * round(table(mat[, varcol])/(sum(table(mat[, varcol]))),digits=3))
cat("\n")
nlev=length(unique(mat[, varcol]))
mylas=1;myfactor=1;maxy=1.1*nrow(mat); if (nlev>5) {mylas=2;myfactor=0.75;}
if(doplot==T){ # If there is a plot to be done
colors <- rainbow(length(unique(mat[,varcol])))
if(is.null(usecolours)==F){
if(length(colours)==length(unique(mat[,varcol]))){
colors=usecolours
}else{
cat("\n\nNOTE: usecolours supplied had length",length(usecolours),"but the number needed is",length(unique(mat[,varcol])),
"so rainbow colours used instead.")
}  }
oldpar=par()$mai
myfreq=table(mat[,varcol])
t1=max(myfreq)/maxy
myi=.05*maxy
if (max(myfreq)<.5*maxy) {maxy=1.1*t1*maxy;myi=.25*myi}
labs <- names(table(mat[,varcol]))
if(myrot==T){
linch <-  max(strwidth(labs, "inch")+0.4, na.rm = TRUE)
par(mai=c(.5*linch,.82,0.82,0.42))
}
bp=barplot(myfreq,ylab="Frequency",xlab="",main="",ylim=c(0,maxy),
col=colors,axes=F,xaxt="n")
axis(1,at=bp,labels=F)
axis(2)
text(bp, myfreq+myi,myfreq,xpd=NA)
if(myrot==T){ #to allow for rotated tick labels to make things fit
text(cex=myfactor, x=bp+bp[1], y=-.04*maxy, labs, xpd=TRUE, srt=45,pos=2)
#print(bp)
par(mai=oldpar)
}
else{axis(1,bp,labs,cex=myfactor);
mtext(dimnames(mat)[[2]][varcol],side=1,line=2)
}
}
}
BioCG_catcontvarsum(the_data,"a",FALSE)
BioCG_catcontvarsum(the_data,"a",TRUE)
table(mat[, varcol],useNA = "ifany")
